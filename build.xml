<?xml version="1.0" encoding="UTF-8"?>
  <project name="WeWine" default="build">
  <property name="toolsdir" value="bin/" />


  <target name="build"
          depends="clean, prepare, lint, composer, phploc, phploc-ci, pdepend, phpmd, phpmd-ci, phpcs, phpcs-ci, phpcpd, phpcpd-ci, phpunit, phpdox"
          description=""/>


  <target name="clean"
          unless="clean.done"
          description="Cleanup build artifacts">
    <delete dir="${basedir}/build/api"/>
    <delete dir="${basedir}/build/coverage"/>
    <delete dir="${basedir}/build/logs"/>
    <delete dir="${basedir}/build/pdepend"/>
    <delete dir="${basedir}/build/phpdox"/>
    <property name="clean.done" value="true"/>
  </target>


  <target name="prepare"
          unless="prepare.done"
          depends="clean"
          description="Prepare for build">
    <mkdir dir="${basedir}/build/api"/>
    <mkdir dir="${basedir}/build/coverage"/>
    <mkdir dir="${basedir}/build/logs"/>
    <mkdir dir="${basedir}/build/pdepend"/>
    <mkdir dir="${basedir}/build/phpdox"/>
    <property name="prepare.done" value="true"/>

  </target>

  <target name="lint" description="Perform syntax check of sourcecode files">
    <apply executable="php" failonerror="true">
      <arg value="-l" />

      <fileset dir="${basedir}/app">
        <include name="**/*.php" />
        <modified />
      </fileset>

    </apply>
  </target>


  <target name="composer" description="Installing composer dependencies">
    <exec executable = "composer" failonerror="true">
      <arg value = "clear-cache" />
    </exec>
<!--
    <exec executable = "composer" failonerror="true">
      <arg value = "self-update" />
    </exec>-->

    <exec executable="composer" failonerror="true">
      <arg value="install" />
      <arg value="--no-interaction" />
    </exec>
  </target>

  <target name="phploc"
           description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
    <exec executable="${toolsdir}phploc">
      <arg value="--count-tests" />
      <arg path="${basedir}/app" />
    </exec>
  </target>

  <target name="phploc-ci"
         depends="prepare"
         description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phploc">
      <arg value="--count-tests" />
      <arg value="--log-csv" />
      <arg path="${basedir}/build/logs/phploc.csv" />
      <arg value="--log-xml" />
      <arg path="${basedir}/build/logs/phploc.xml" />
      <arg path="${basedir}/app" />
    </exec>
  </target>


  <target name="pdepend"
         depends="prepare"
         description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}pdepend">
      <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
      <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
      <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
      <arg path="${basedir}/app" />
    </exec>
  </target>

  <target name="phpmd"
         description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpmd">
      <arg path="${basedir}/app" />
      <arg value="text" />
      <arg path="${basedir}/build/phpmd.xml" />
    </exec>
  </target>

  <target name="phpmd-ci"
         depends="prepare"
         description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpmd">
      <arg path="${basedir}/app" />
      <arg value="xml" />
      <arg path="${basedir}/build/phpmd.xml" />
      <arg value="--reportfile" />
      <arg path="${basedir}/build/logs/pmd.xml" />
    </exec>
  </target>

  <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpcs">
      <arg value="--standard=PSR2" />
      <arg value="--extensions=php" />
      <arg value="--ignore=autoload.php" />
      <arg path="${basedir}/app" />
    </exec>
  </target>

  <target name="phpcs-ci"
         depends="prepare"
         description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpcs" output="/dev/null">
      <arg value="--report=checkstyle" />
      <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
      <arg value="--standard=PSR2" />
      <arg value="--extensions=php" />
      <arg value="--ignore=autoload.php" />
      <arg path="${basedir}/app" />
    </exec>
 </target>

  <target name="phpcpd"
         description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${toolsdir}phpcpd">
      <arg path="${basedir}/app" />
    </exec>
  </target>

  <target name="phpcpd-ci"
         depends="prepare"
         description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${toolsdir}phpcpd">
      <arg value="--log-pmd" />
      <arg path="${basedir}/build/logs/pmd-cpd.xml" />
      <arg path="${basedir}/app" />
    </exec>
  </target>


  <target name="phpunit"
         depends="prepare"
         description="Run unit tests with PHPUnit">
    <exec executable="${toolsdir}phpunit" failonerror="true">
      <arg value="--configuration"/>
      <arg path="${basedir}/build/phpunit.xml"/>
    </exec>
 </target>

  <target name="phpdox"
         depends="phploc-ci,phpcs-ci,phpmd-ci"
         description="Generate project documentation using phpDox">
    <exec executable="${toolsdir}phpdox">
      <arg value="--file" />
      <arg value="${basedir}/build/phpdox.xml" />
    </exec>
  </target>
  

</project>
